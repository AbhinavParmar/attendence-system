package com.shivam.hrms.attendance.attendancesystem;

import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.impl.client.CloseableHttpClient;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.http.HttpResponse;
import org.apache.http.entity.StringEntity;
import com.google.gson.Gson;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;

public class FaceDetectionPythonCall {
    public static void main(String args[]) throws IOException {

        String       postUrl       = "http://192.168.5.26:3000/detect_final2";// put in your url
        Gson         gson          = new Gson();
        CloseableHttpClient httpClient = HttpClientBuilder.create().build();
        HttpPost     httpPost          = new HttpPost(postUrl);

        //create a POJO

        //gson.tojson() converts your pojo to json

        //currently Hard coding the request data for httpPost Call directly from method to python script AND
        StringEntity postingString = new StringEntity(gson.toJson(
                new EmployeeAttendance("Unknown Person",
                        "Unknown Dept",
                        "2023-12-28T09:45:21",
                        "")
                ));

        httpPost.setEntity(postingString);
        httpPost.setHeader("Content-type", "application/json");
        CloseableHttpResponse httpResponse = httpClient.execute(httpPost);

        System.out.println("POST Response Status:: "
                + httpResponse.getStatusLine().getStatusCode());

        BufferedReader reader = new BufferedReader(new InputStreamReader(
                httpResponse.getEntity().getContent()));

        String inputLine;
        StringBuffer response = new StringBuffer();

        while ((inputLine = reader.readLine()) != null) {
            response.append(inputLine);
        }
        reader.close();

        // print result
        System.out.println(response.toString());
        httpClient.close();
    }
}
